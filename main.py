import os
import asyncio
import pandas as pd
import matplotlib.pyplot as plt

import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import FSInputFile
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hbold

TOKEN = "7619172313:AAEm-5Y-gdWpCsX5B_UDNEduQ5y060rAe_I"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è DataFrame –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
dataframes = {}

@dp.message(Command("start"))
async def start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ CSV –∏–ª–∏ Excel-—Ñ–∞–π–ª, –∏ —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é üìä\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /plot_hist ‚Äì –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É\n"
        "‚Ä¢ /plot_box ‚Äì –ø–æ—Å—Ç—Ä–æ–∏—Ç—å boxplot (—è—â–∏–∫ —Å —É—Å–∞–º–∏)\n"
        "‚Ä¢ /plot_corr ‚Äì –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏\n"
        "‚Ä¢ /plot_line <–∫–æ–ª–æ–Ω–∫–∞> ‚Äì –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ\n"
        "‚Ä¢ /fillna <–∑–Ω–∞—á–µ–Ω–∏–µ> ‚Äì –∑–∞–º–µ–Ω–∏—Ç—å –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '/fillna median' –∏–ª–∏ '/fillna 0')\n"
        "‚Ä¢ /show_data ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫\n"
        "‚Ä¢ /duplicated ‚Äì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å/—É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã\n"
        "‚Ä¢ /outliers ‚Äì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å/—É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã\n"
        "‚Ä¢ /finish ‚Äì –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª\n"
        "‚Ä¢ /reset ‚Äì —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª, –∞ –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã!"
    )
    await message.answer(text)

@dp.message(lambda message: message.document and message.document.mime_type in [
    "text/csv",
    "application/vnd.ms-excel",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
])
async def handle_file(message: types.Message):
    file_id = message.document.file_id
    file_name = message.document.file_name
    file_path = f"./{file_name}"

    file = await bot.get_file(file_id)
    await bot.download_file(file.file_path, destination=file_path)

    try:
        if file_name.endswith('.csv'):
            df = pd.read_csv(file_path)
        elif file_name.endswith(('.xls', '.xlsx')):
            df = pd.read_excel(file_path)
        else:
            await message.answer("–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è! –ü—Ä–∏—à–ª–∏—Ç–µ CSV –∏–ª–∏ Excel-—Ñ–∞–π–ª.")
            os.remove(file_path)
            return
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        os.remove(file_path)
        return

    dataframes[message.from_user.id] = df

    summary = df.describe().to_string() if not df.empty else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    missing_values = df.isnull().sum().to_string()

    response = f"üìä {hbold('–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞')}:\n\n"
    response += f"‚úÖ –ö–æ–ª–æ–Ω–∫–∏: {', '.join(df.columns)}\n"
    response += f"üìè –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫\n\n"
    response += f"üìà {hbold('–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')}:\n<pre>{summary}</pre>\n\n"
    response += f"üîç {hbold('–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')}:\n<pre>{missing_values}</pre>"

    await message.answer(response, parse_mode=ParseMode.HTML)

    if not df.empty:
        fig, ax = plt.subplots(figsize=(6, 4))
        df.hist(ax=ax)
        plt.tight_layout()
        plot_path = f"hist_{message.from_user.id}.png"
        plt.savefig(plot_path)
        plt.close(fig)

        await message.answer_photo(photo=FSInputFile(plot_path))
        os.remove(plot_path)

    os.remove(file_path)

# –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã /plot_hist
@dp.message(Command("plot_hist"))
async def plot_hist(message: types.Message):
    user_id = message.from_user.id
    if user_id not in dataframes:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª!")
        return

    df = dataframes[user_id]
    if df.empty:
        await message.answer("–î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ!")
        return

    fig, ax = plt.subplots(figsize=(6, 4))
    df.hist(ax=ax)
    plt.tight_layout()
    plot_path = f"hist_{user_id}.png"
    plt.savefig(plot_path)
    plt.close(fig)

    await message.answer_photo(photo=FSInputFile(plot_path))
    os.remove(plot_path)

#
# 2) /plot_box ‚Äî —Å—Ç—Ä–æ–∏—Ç boxplot (—è—â–∏–∫ —Å —É—Å–∞–º–∏) –¥–ª—è –≤—Å–µ—Ö —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
#
@dp.message(Command("plot_box"))
async def plot_box(message: types.Message):
    user_id = message.from_user.id
    if user_id not in dataframes:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª!")
        return

    df = dataframes[user_id]
    if df.empty:
        await message.answer("–î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ!")
        return

    fig, ax = plt.subplots(figsize=(6, 4))
    df.plot.box(ax=ax)
    plt.tight_layout()
    plot_path = f"box_{user_id}.png"
    plt.savefig(plot_path)
    plt.close(fig)

    await message.answer_photo(photo=FSInputFile(plot_path))
    os.remove(plot_path)

#
# 3) /plot_corr ‚Äî —Å—Ç—Ä–æ–∏—Ç –º–∞—Ç—Ä–∏—Ü—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (heatmap)
#
@dp.message(Command("plot_corr"))
async def plot_corr(message: types.Message):
    user_id = message.from_user.id
    if user_id not in dataframes:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª!")
        return

    df = dataframes[user_id]
    if df.empty:
        await message.answer("–î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ!")
        return

    corr = df.corr(numeric_only=True)  # numeric_only=True –¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π pandas

    fig, ax = plt.subplots(figsize=(6, 4))
    cax = ax.matshow(corr, cmap='viridis')
    fig.colorbar(cax)
    ax.set_xticks(range(len(corr.columns)))
    ax.set_yticks(range(len(corr.index)))
    ax.set_xticklabels(corr.columns, rotation=90)
    ax.set_yticklabels(corr.index)
    plt.tight_layout()
    plot_path = f"corr_{user_id}.png"
    plt.savefig(plot_path)
    plt.close(fig)

    await message.answer_photo(photo=FSInputFile(plot_path))
    os.remove(plot_path)

#
# 4) /plot_line <–∫–æ–ª–æ–Ω–∫–∞> ‚Äî —Å—Ç—Ä–æ–∏—Ç –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
#
@dp.message(Command("plot_line"))
async def plot_line(message: types.Message):
    user_id = message.from_user.id
    if user_id not in dataframes:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª!")
        return

    df = dataframes[user_id]
    if df.empty:
        await message.answer("–î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ!")
        return

    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: /plot_line column_name")
        return

    column = parts[1]
    if column not in df.columns:
        await message.answer(f"–ö–æ–ª–æ–Ω–∫–∏ '{column}' –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –°—Ç—Ä–æ–∏–º –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
    fig, ax = plt.subplots(figsize=(6, 4))
    ax.plot(df.index, df[column], marker='o', linestyle='-')
    ax.set_xlabel("Index")
    ax.set_ylabel(column)
    ax.set_title(f"Line Plot for '{column}'")
    plt.tight_layout()

    plot_path = f"line_{user_id}.png"
    plt.savefig(plot_path)
    plt.close(fig)

    await message.answer_photo(photo=FSInputFile(plot_path))
    os.remove(plot_path)

#
# 5) /fillna <–∑–Ω–∞—á–µ–Ω–∏–µ> ‚Äî –∑–∞–º–µ–Ω–∞ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
#
@dp.message(Command("fillna"))
async def fillna_cmd(message: types.Message):
    user_id = message.from_user.id
    if user_id not in dataframes:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª!")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä '/fillna median' –∏–ª–∏ '/fillna 0'")
        return

    fill_value = parts[1].strip()
    df = dataframes[user_id]

    if fill_value.lower() == "median":
        numeric_cols = df.select_dtypes(include='number').columns
        if numeric_cols.empty:
            await message.answer("–ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞–Ω–æ–π.")
        else:
            for col in numeric_cols:
                df[col].fillna(df[col].median(), inplace=True)
            await message.answer("–ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –º–µ–¥–∏–∞–Ω—É.")
    else:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–≤–µ—Å—Ç–∏ fill_value –∫ —á–∏—Å–ª—É, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è ‚Äî –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
        try:
            fill_value_converted = float(fill_value)
            df.fillna(fill_value_converted, inplace=True)
            await message.answer(f"–ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {fill_value_converted}.")
        except ValueError:
            df.fillna(fill_value, inplace=True)
            await message.answer(f"–ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–æ–∫—É '{fill_value}'.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    dataframes[user_id] = df

#
# 6) /show_data ‚Äì –≤—ã–≤–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ —Ñ–∞–π–ª–∞
#
@dp.message(Command("show_data"))
async def show_data(message: types.Message):
    user_id = message.from_user.id
    if user_id not in dataframes:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª!")
        return

    df = dataframes[user_id]
    if df.empty:
        await message.answer("–î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ!")
        return

    await message.answer(f"–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:\n<pre>{df.head().to_string()}</pre>")

#
# 7) /duplicated ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –∏/–∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
#
@dp.message(Command("duplicated"))
async def duplicated_cmd(message: types.Message):
    user_id = message.from_user.id
    if user_id not in dataframes:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª!")
        return

    df = dataframes[user_id]
    if df.empty:
        await message.answer("–î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ!")
        return

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    dup_count = df.duplicated().sum()
    if dup_count == 0:
        await message.answer("–î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.")
        return

    text = (
        f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {dup_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.\n\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Ö —É–¥–∞–ª–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /duplicated remove"
    )
    parts = message.text.split()
    if len(parts) > 1 and parts[1].lower() == "remove":
        df.drop_duplicates(inplace=True)
        dataframes[user_id] = df
        text = f"–£–¥–∞–ª–µ–Ω–æ {dup_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤. –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {df.shape[0]} —Å—Ç—Ä–æ–∫."
    await message.answer(text)

#
# 8) /outliers ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –∏/–∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã (–ø—Ä–æ—Å—Ç–æ–π IQR-–º–µ—Ç–æ–¥)
#
@dp.message(Command("outliers"))
async def outliers_cmd(message: types.Message):
    user_id = message.from_user.id
    if user_id not in dataframes:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª!")
        return

    df = dataframes[user_id]
    if df.empty:
        await message.answer("–î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ!")
        return

    numeric_cols = df.select_dtypes(include='number').columns
    if numeric_cols.empty:
        await message.answer("–ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤.")
        return

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
    rows_before = df.shape[0]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª "/outliers remove" ‚Äì —É–¥–∞–ª—è–µ–º
    parts = message.text.split()
    remove_flag = (len(parts) > 1 and parts[1].lower() == "remove")

    outliers_count_total = 0
    if remove_flag:
        for col in numeric_cols:
            Q1 = df[col].quantile(0.25)
            Q3 = df[col].quantile(0.75)
            IQR = Q3 - Q1
            lower_bound = Q1 - 1.5 * IQR
            upper_bound = Q3 + 1.5 * IQR
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ "–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ" –∑–Ω–∞—á–µ–Ω–∏—è
            df = df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]
        dataframes[user_id] = df
        rows_after = df.shape[0]
        outliers_count_total = rows_before - rows_after
        await message.answer(f"–£–¥–∞–ª–µ–Ω–æ –≤—ã–±—Ä–æ—Å–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ): {outliers_count_total}. –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {rows_after} —Å—Ç—Ä–æ–∫.")
    else:
        # –ü—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—ã–±—Ä–æ—Å–æ–≤ (–ø–æ IQR) –º–æ–≥–ª–æ –±—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ
        temp_df = df.copy()
        for col in numeric_cols:
            Q1 = temp_df[col].quantile(0.25)
            Q3 = temp_df[col].quantile(0.75)
            IQR = Q3 - Q1
            lower_bound = Q1 - 1.5 * IQR
            upper_bound = Q3 + 1.5 * IQR
            temp_df = temp_df[(temp_df[col] >= lower_bound) & (temp_df[col] <= upper_bound)]
        rows_after = temp_df.shape[0]
        outliers_count_total = rows_before - rows_after
        await message.answer(
            f"–ü–æ IQR-–º–µ—Ç–æ–¥—É –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ–∫–æ–ª–æ {outliers_count_total} –≤—ã–±—Ä–æ—Å–æ–≤.\n"
            "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /outliers remove"
        )

#
# 9) /finish ‚Äì –≤—ã–≥—Ä—É–∑–∫–∞ (–æ—Ç–ø—Ä–∞–≤–∫–∞) —Ç–µ–∫—É—â–µ–≥–æ DataFrame –æ–±—Ä–∞—Ç–Ω–æ –∫–∞–∫ CSV
#
@dp.message(Command("finish"))
async def finish_cmd(message: types.Message):
    user_id = message.from_user.id
    if user_id not in dataframes:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
        return

    df = dataframes[user_id]
    if df.empty:
        await message.answer("–î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ! –í–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
        return

    output_file = f"processed_{user_id}.csv"
    df.to_csv(output_file, index=False)

    await message.answer_document(document=FSInputFile(output_file))
    os.remove(output_file)

#
# 10) /reset ‚Äì —Å–±—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
#
@dp.message(Command("reset"))
async def reset_cmd(message: types.Message):
    user_id = message.from_user.id
    if user_id in dataframes:
        del dataframes[user_id]
        await message.answer("–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
    else:
        await message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–±—Ä–æ—Å–∞.")

#
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
#
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())